#!/usr/bin/env python3

import os
import sys
import configparser
import argparse
import subprocess
import json

def main(argv):
  parser = argparse.ArgumentParser()
  parser.add_argument('token', type=str, help='mfa token')
  argv = parser.parse_args(argv)

  cred_path = os.path.expanduser('~/.aws/credentials')

  if not os.access(cred_path, os.R_OK | os.W_OK | os.F_OK):
    print('%s is not accessible' % cred_path, file=sys.stderr)
    exit(1)

  config = configparser.ConfigParser()
  parsed = config.read(cred_path)

  if len(parsed) == 0:
    print('cannot parse %s' % cred_path, file=sys.stderr)
    exit(1)

  if not config.has_option('aws-mfa', 'aws_access_key_id'):
    print('%s must have [aws-mfa][aws_access_key_id]')
    exit(1)

  if not config.has_option('aws-mfa', 'aws_secret_access_key'):
    print('%s must have [aws-mfa][aws_secret_access_key]')
    exit(1)

  if not config.has_option('aws-mfa', 'mfa_serial'):
    print('%s must have [aws-mfa][mfa_serial]')
    exit(1)

  mfa_serial = config.get('aws-mfa', 'mfa_serial')

  proc = subprocess.Popen(['aws', 'sts', 'get-session-token',
                              '--profile', 'aws-mfa',
                              '--output', 'json',
                              '--serial-number', mfa_serial,
                              '--token-code', argv.token],
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)

  (stdout, stderr) = proc.communicate()
  exitcode = proc.wait()
  if exitcode != 0:
    print(stderr.decode('utf-8'), file=sys.stderr)
    exit(exitcode)

  out_obj = json.loads(stdout.decode('utf-8'))
  if not config.has_section('default'):
    config.add_section('default')
  config.set('default', 'aws_access_key_id', out_obj['Credentials']['AccessKeyId'])
  config.set('default', 'aws_secret_access_key', out_obj['Credentials']['SecretAccessKey'])
  config.set('default', 'aws_session_token', out_obj['Credentials']['SessionToken'])

  with open(cred_path, 'w') as configfile:
    config.write(configfile)

if __name__ == '__main__':
  main(sys.argv[1:])
