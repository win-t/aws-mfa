#!/usr/bin/env python3

import os
import sys
import configparser
import argparse
import json

from subprocess import run, DEVNULL, PIPE

def main(argv):
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('token', type=str, help='mfa token')
  parser.add_argument('--mfaprofile', type=str, default='aws-mfa', help='which mfa profile to be used')
  argv = parser.parse_args(argv)

  cred_path = os.path.expanduser('~/.aws/credentials')

  if not os.access(cred_path, os.R_OK | os.W_OK | os.F_OK):
    print('%s is not accessible' % cred_path, file=sys.stderr)
    exit(1)

  config = configparser.ConfigParser()
  parsed = config.read(cred_path)
  mfaprofile = argv.mfaprofile

  if len(parsed) == 0:
    print('cannot parse %s' % cred_path, file=sys.stderr)
    exit(1)

  if not config.has_option(mfaprofile, 'aws_access_key_id'):
    print('%s must have [%s][aws_access_key_id]' % (cred_path, mfaprofile), file=sys.stderr)
    exit(1)

  if not config.has_option(mfaprofile, 'aws_secret_access_key'):
    print('%s must have [%s][aws_secret_access_key]' % (cred_path, mfaprofile), file=sys.stderr)
    exit(1)

  if not config.has_option(mfaprofile, 'mfa_serial'):
    print('%s must have [%s][mfa_serial]' % (cred_path, mfaprofile), file=sys.stderr)
    exit(1)

  mfa_serial = config.get(mfaprofile, 'mfa_serial')

  proc = run(['aws', 'sts', 'get-session-token',
                              '--profile', mfaprofile,
                              '--output', 'json',
                              '--serial-number', mfa_serial,
                              '--token-code', argv.token],
              stdin=DEVNULL,
              stdout=PIPE)

  out_obj = json.loads(proc.stdout.decode('utf-8'))
  if not config.has_section('default'):
    config.add_section('default')
  config.set('default', 'aws_access_key_id', out_obj['Credentials']['AccessKeyId'])
  config.set('default', 'aws_secret_access_key', out_obj['Credentials']['SecretAccessKey'])
  config.set('default', 'aws_session_token', out_obj['Credentials']['SessionToken'])

  with open(cred_path, 'w') as configfile:
    config.write(configfile)

if __name__ == '__main__':
  main(sys.argv[1:])
